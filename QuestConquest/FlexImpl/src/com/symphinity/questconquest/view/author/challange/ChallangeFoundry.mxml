<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:challange="com.symphinity.questconquest.view.author.challange.*">

	<mx:Script>
		<![CDATA[
		
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import mx.events.ListEvent;	
		import mx.managers.PopUpManager;
			
		import com.symphinity.questconquest.model.adventure.Adventure;
		import com.symphinity.questconquest.model.challange.Challange;
		import com.symphinity.questconquest.model.FoundryModel;
		
		import com.symphinity.questconquest.view.author.challange.ChallangeTypeSelector;
		import com.symphinity.questconquest.model.challange.TrueOrFalseChallangeType;		
		
		[Bindable]
		public var foundryModel: FoundryModel;		
		
		protected function newChallange():void {
			var typeSelector:ChallangeTypeSelector = ChallangeTypeSelector(PopUpManager.createPopUp( this, ChallangeTypeSelector , true));
		}
		
		protected function confirmRemoveChallange():void {
			Alert.show("Are you sure to remove the currently selected challange ? ", "Confirm removal", Alert.YES + Alert.NO, null, challangeRemovalAlertHandler);
		}
		
		protected function challangeRemovalAlertHandler(event: CloseEvent):void 
		{
			if (event.detail == Alert.YES)
			{
				var challange: Challange = foundryModel.currentChallange;
				if (challange == null)
				{
					Alert.show("Please select a challange to be removed from the list and try again.");
				}
				else {
					removeChallange(challange);			
				}
			}
			
				
		}		
		
		protected function removeChallange(challange: Challange):void 
		{
			var itemIndex: int = foundryModel.adventure.getChallangeSet().getItemIndex(challange);
			if ( itemIndex >= 0)
			{
				foundryModel.adventure.getChallangeSet().removeItemAt(itemIndex);
			}
			
		}
		
		
		protected function onListSelectionChange(event: ListEvent): void {
			
			foundryModel.updateCurrentChallangeFromIndex(event.rowIndex);
			challangeView.challangeModel = Challange(foundryModel.adventure.getChallangeSet().getItemAt(event.rowIndex));
		}
		
		]]>
	</mx:Script>
		
	<mx:HDividedBox width="100%" height="100%" >
		
		<!--
			//TODO: The challange list and viewer are at same level of abstraction.
			To maintain the symmetry, abstract the challange list functionality to a separate component.
		-->
		
		<mx:VBox width="30%" height="100%" >
			<mx:HBox>
				<mx:Button id="newChallangeButton" label="Add New" click="newChallange();" />
				<mx:Button id="removeChallangeButton" label="Remove" click="confirmRemoveChallange();" />				
			</mx:HBox>
			<mx:List id="challangeList" width="100%" height="100%"  dataProvider="{foundryModel.adventure.getChallangeSet()}"
						 change="onListSelectionChange(event)" selectedItem="{foundryModel.currentChallange}">
				<mx:itemRenderer>
					<mx:Component>
						<mx:HBox>
							<mx:Label text="{data.text.substr(0,20)}" />
						</mx:HBox>
					</mx:Component>
				</mx:itemRenderer>
			</mx:List>
		</mx:VBox>
		<mx:VBox width="70%" height="100%" >
			<challange:ChallangeView id="challangeView" challangeModel="{foundryModel.currentChallange}" width="100%" height="100%" />
		</mx:VBox>
	</mx:HDividedBox>
</mx:VBox>